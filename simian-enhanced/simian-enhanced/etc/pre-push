#!/bin/bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>


remote="$1"
url="$2"
hook_path=$(cd $(dirname $0); pwd)
project_root=${hook_path%/.git/hooks}

# check env has installed simiam-analyze 
rpm -q simian-enhanced &>/dev/null|| exit 0

java_bin="/usr/java/latest/bin/java"
simian_bin="/var/lib/simian-enhanced/simian-2.5.3.jar"
mkdir -p /tmp

# extract files while this commit, then create filter
commit_files=$(git show --raw --oneline --name-only | sed -n "2,$"p | awk "{print \"$project_root/\" \$0}")
> /tmp/simian.filter
for file in $commit_files
do
    echo $file >> /tmp/simian.filter
done

# create origin/master simian report
current_branch=$(git branch|grep \*|awk '{print $2}')
git stash &>/dev/null
git checkout $remote/master &>/dev/null
$java_bin -jar $simian_bin -includes=$project_root/**/*.c -excludes=$project_root/code/apps/ofdpa/** -reportDuplicateText+ -threshold=10 -formatter=xml:$projec_root/simian_old.xml &>/dev/null

# create new commit simian report
git checkout $current_branch &>/dev/null
$java_bin -jar $simian_bin -includes=$project_root/**/*.c -excludes=$project_root/code/apps/ofdpa/** -reportDuplicateText+ -threshold=10 -formatter=xml:$projec_root/simian_new.xml &>/dev/null
git stash pop &>/dev/null

simiam-analyze $project_root/simian_old.xml $project_root/simian_new.xml --filter /tmp/simian.filter
